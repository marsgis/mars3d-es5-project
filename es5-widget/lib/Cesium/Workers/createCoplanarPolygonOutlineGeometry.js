define(["./arrayRemoveDuplicates-fe254feb","./Transforms-bd15b2e7","./Matrix2-1509208a","./RuntimeError-ac440aa5","./ComponentDatatype-a9820060","./CoplanarPolygonGeometryLibrary-042de0d0","./defaultValue-69ee94f4","./GeometryAttribute-ce92871d","./GeometryAttributes-1b4134a9","./GeometryInstance-86b030a6","./GeometryPipeline-b301e381","./IndexDatatype-1cbc8622","./PolygonGeometryLibrary-58067699","./_commonjsHelpers-3aae1032-15991586","./combine-0259f56f","./WebGLConstants-f63312fc","./OrientedBoundingBox-d1d264af","./EllipsoidTangentPlane-73d81019","./AxisAlignedBoundingBox-67e6ea73","./IntersectionTests-5ec530d5","./Plane-e3daa19b","./AttributeCompression-7a823eb1","./EncodedCartesian3-ee8e4156","./ArcType-e1641d8d","./EllipsoidRhumbLine-7b6199fa","./PolygonPipeline-85da16de"],(function(e,t,n,o,r,i,a,y,l,s,c,u,p,d,m,g,f,b,h,P,G,L,T,E,H,A){"use strict";function C(e){const t=e.length,n=new Float64Array(3*t),o=u.IndexDatatype.createTypedArray(t,2*t);let i=0,a=0;for(let r=0;r<t;r++){const y=e[r];n[i++]=y.x,n[i++]=y.y,n[i++]=y.z,o[a++]=r,o[a++]=(r+1)%t}const s=new l.GeometryAttributes({position:new y.GeometryAttribute({componentDatatype:r.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:n})});return new y.Geometry({attributes:s,indices:o,primitiveType:y.PrimitiveType.LINES})}function k(e){const t=(e=a.defaultValue(e,a.defaultValue.EMPTY_OBJECT)).polygonHierarchy;this._polygonHierarchy=t,this._workerName="createCoplanarPolygonOutlineGeometry",this.packedLength=p.PolygonGeometryLibrary.computeHierarchyPackedLength(t)+1}k.fromPositions=function(e){return new k({polygonHierarchy:{positions:(e=a.defaultValue(e,a.defaultValue.EMPTY_OBJECT)).positions}})},k.pack=function(e,t,n){return n=a.defaultValue(n,0),t[n=p.PolygonGeometryLibrary.packPolygonHierarchy(e._polygonHierarchy,t,n)]=e.packedLength,t};const _={polygonHierarchy:{}};return k.unpack=function(e,t,n){t=a.defaultValue(t,0);const o=p.PolygonGeometryLibrary.unpackPolygonHierarchy(e,t);t=o.startingIndex,delete o.startingIndex;const r=e[t];return a.defined(n)||(n=new k(_)),n._polygonHierarchy=o,n.packedLength=r,n},k.createGeometry=function(o){const r=o._polygonHierarchy;let a=r.positions;if(a=e.arrayRemoveDuplicates(a,n.Cartesian3.equalsEpsilon,!0),a.length<3)return;if(!i.CoplanarPolygonGeometryLibrary.validOutline(a))return;const l=p.PolygonGeometryLibrary.polygonOutlinesFromHierarchy(r,!1);if(0===l.length)return;const u=[];for(let e=0;e<l.length;e++){const t=new s.GeometryInstance({geometry:C(l[e])});u.push(t)}const d=c.GeometryPipeline.combineInstances(u)[0],m=t.BoundingSphere.fromPoints(r.positions);return new y.Geometry({attributes:d.attributes,indices:d.indices,primitiveType:d.primitiveType,boundingSphere:m})},function(e,t){return a.defined(t)&&(e=k.unpack(e,t)),e._ellipsoid=n.Ellipsoid.clone(e._ellipsoid),k.createGeometry(e)}}));
